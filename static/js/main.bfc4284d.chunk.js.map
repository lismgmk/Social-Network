{"version":3,"sources":["components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Nav/Nav.module.css","components/Users/Users.module.css","Api/api.ts","Redux/profile-reducer.ts","Redux/dialogsReduser.ts","Redux/usersReduser.ts","Redux/authorReduser.ts","Redux/appReduser.ts","Redux/redux-store.tsx","components/Nav/Nav.tsx","images/user.svg","components/Users/Users.tsx","images/Preloader.gif","components/elseElements/Preloader.tsx","Redux/usersSelector.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialodItem/DialogItem.tsx","components/helpers/renderField.tsx","components/helpers/validation.tsx","components/Dialogs/Dialogs.tsx","HOK/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Form/LoginForm.tsx","components/Login/LoginContainer.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","App.module.css"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","userApi","pageSize","actionPage","get","then","response","data","id","delete","post","headerApi","formData","authorApi","setStatusAuthor","status","put","getStatusAuthor","param","getProfileUser","getStatus","type","initialState","posts","message","likeCount","profileUser","statusAuthor","profileReduser","state","action","text","model","dialogs","name","dialogsReduser","newDialog","newMessage","users","totalCount","isLoaded","statusButton","followArrButton","followBoolButton","usersReduser","map","u","userId","followed","filter","i","followUser","unfollowUser","setUser","setTotalCount","count","setActionPage","page","setLoaded","load","isdisabledButton","email","login","isLog","authorReduser","payload","getCurentAuthor","getAuthor","dispatch","resultCode","initialazed","captcha","appReduser","RootReducer","combineReducers","profilePage","dialogsPage","usersPage","author","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","Nav","className","s","nav","item","to","PATH","SOCIAL_PROFILE","activeClassName","activeLink","active","SOCIAL_MESSAGE","SOCIAL_USERS","SOCIAL_LOGIN","Users","props","clickActionPage","unFollow","follow","pagesCount","Math","ceil","arr","push","container","boxes","p","activePage","pageNumberStyle","onClick","e","box","ava","src","photos","small","user","disabled","some","textArea","nameMessageArea","button","Preloader","style","backgroundColor","preloader","getUsers","createSelector","pageSizeSelector","totalCountSelector","pageActionPage","pageIsLoaded","followArrButtonSelector","followBoolButtonSelector","UsersContainer","getUser","this","unFollowBlock","followBlock","React","Component","connect","iserId","items","Header","header","idAuthor","Button","variant","color","logOutAuthor","from","SOCIAL_404","HeaderContainer","Message","Dialog","path","dialogsItem","dialog","FormCreateField","children","label","meta","touched","error","TextArea","input","placeholder","TextInput","CheckBoxInput","RenderField","component","validate","Field","min","max","required","value","undefined","maxLength7","length","maxLength20","DialogsRedaxForm","reduxForm","onSubmit","handleSubmit","dialogsWrapper","WithAuthorStateToProps","compose","addDialog","addDialogActionCreater","restProps","getDialog","getMessage","messages","textarea","Post","profilePagePosts","addPost","postsElements","postsBlock","MyPostsFormRedux","ProfileStatusWithHook","memo","useState","editMode","seteditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","currentTarget","ProfileInfo","profileInfo","large","fullName","contacts","github","lookingForAJobDescription","Profile","profile","MyPostsContainer","ProfileClassContainer","match","params","authorId","history","withRouter","LoginForm","Paper","width","Container","Grid","padding","xs","spacing","pristine","submitting","reset","LoginReduxForm","LoginContainer","logInAuthor","stopSubmit","_error","App","getInitialAuthor","appWrapper","main","SOCIAL_NULL","exact","render","SOCIAL_NETWORK","ProfileContainer","DialogsContainer","rerenderEntireTree","ReactDOM","basename","process","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.bfc4284d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3DeAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__288uQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__2hth2\",\"item\":\"Nav_item__1W6dT\",\"activeLink\":\"Nav_activeLink__2vev1\",\"active\":\"Nav_active__2u5aq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Users_container__24lju\",\"box\":\"Users_box__2b-RK\",\"ava\":\"Users_ava__2DOrr\",\"textArea\":\"Users_textArea__1lN72\",\"nameMessageArea\":\"Users_nameMessageArea__1PiZY\",\"countruCityArea\":\"Users_countruCityArea__2mF15\",\"button\":\"Users_button__2IRaI\",\"activePage\":\"Users_activePage__1PvTQ\",\"boxes\":\"Users_boxes__2jUHr\",\"pageNumberStyle\":\"Users_pageNumberStyle__2aHnj\"};","import axios from \"axios\"\r\nimport {\r\n    formDataType,\r\n    getAuthorDataRespType,\r\n    getAuthorRespType, getProfileUserType,\r\n    getUserRespType,\r\n    postFollowRespType\r\n} from \"../Types/types\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        'API-KEY': 'a40d8e19-8ad7-4404-b77e-7dea185478ff'\r\n    }\r\n})\r\n\r\nexport const userApi = {\r\n    getUsers(pageSize = 3, actionPage = 10){\r\n        return instance.get<getUserRespType>(`users?count=${pageSize}&page=${actionPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unFollow(id: number){\r\n        return instance.delete<postFollowRespType<{}>>(`follow/${id}`)\r\n    },\r\n    follow(id: number){\r\n        return instance.post<postFollowRespType<{}>>(`follow/${id}`)\r\n    },\r\n    getOneUser(param: number){\r\n        console.warn('try else method')\r\n        return authorApi.getProfileUser(param)\r\n    }\r\n}\r\n\r\nexport const headerApi = {\r\n    getAuthor() {\r\n        return instance.get<getAuthorRespType<getAuthorDataRespType>>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logInAuthor(formData: formDataType) {\r\n        return instance.post<postFollowRespType<{ userId: number}>>('/auth/login', formData)\r\n    },\r\n    logOutAuthor() {\r\n        return instance.delete<postFollowRespType<{}>>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const authorApi = {\r\n    setStatusAuthor(status: string) {\r\n        debugger\r\n        return instance.put<postFollowRespType<{}>>(`/profile/status`, {status: status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatusAuthor(param: number | null){\r\n        return instance.get<string>(`/profile/status/${param}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfileUser(param: number | null){\r\n        return instance.get<getProfileUserType>(`profile/${param}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\n","import {authorApi} from \"../Api/api\";\r\nimport {getProfileUserType} from \"../Types/types\";\r\n\r\n\r\nexport const addPost = (text: string) => ({type: 'ADDPOST', text} as const);\r\nexport const addProfileUser = (model: getProfileUserType) => ({type: 'ADD_PROFILE_USER', model} as const);\r\nexport const getStatus = (status: string) => ({type: 'GET_STATUS_USER', status} as const);\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likeCount: 11}\r\n    ] as Array<postsType>,\r\n    profileUser: null as getProfileUserType | null,\r\n    statusAuthor: '',\r\n}\r\n\r\nexport type InitStateProfileType = typeof initialState\r\n\r\nconst profileReduser = (state = initialState, action: ActionsTypes): InitStateProfileType => {\r\n    switch (action.type) {\r\n        case 'ADDPOST':\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {message: action.text, id: 3, likeCount: 10}]\r\n            }\r\n        case 'ADD_PROFILE_USER': {\r\n            return {\r\n                ...state,\r\n                profileUser: {...state.profileUser, ...action.model}\r\n            }\r\n        }\r\n\r\n        case 'GET_STATUS_USER': {\r\n\r\n            return {\r\n                ...state,\r\n                statusAuthor: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default profileReduser;\r\n\r\nexport const getProfileUser = (param: number | null) => {\r\n    return (\r\n        (dispatch) => {\r\n            authorApi.getProfileUser(param)\r\n                .then(response => {\r\n                    dispatch(addProfileUser(response))\r\n                })\r\n        })\r\n}\r\nexport const getStatusAuthor = (param: number | null) => {\r\n    return (\r\n        (dispatch) => {\r\n            debugger\r\n            authorApi.getStatusAuthor(param)\r\n                .then(response => {\r\n                    dispatch(getStatus(response))\r\n                })\r\n        })\r\n}\r\nexport const setStatusAuthor = (status: string) => (dispatch) => {\r\n    debugger\r\n    authorApi.setStatusAuthor(status)\r\n        .then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(getStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport type postsType =\r\n    {\r\n        message: string\r\n        id: number\r\n        likeCount: number\r\n    }\r\n\r\ntype addPostType = ReturnType<typeof addPost>\r\ntype addProfileUserType = ReturnType<typeof addProfileUser>\r\ntype getStatusType = ReturnType<typeof getStatus>\r\n\r\ntype ActionsTypes =\r\n    | addPostType\r\n    | addProfileUserType\r\n    | getStatusType","import React from 'react';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {name: 'Andrey', id: 1},\r\n        {name: 'Vova', id: 2},\r\n        {name: 'Igor', id: 3},\r\n    ] as Array<dialogsType>,\r\n    message: [\r\n        {message: 'Hi hello', id: 1},\r\n        {message: 'Good morning', id: 2},\r\n    ] as Array<messageType>,\r\n}\r\n\r\nconst dialogsReduser = (state = initialState, action: ActionType):initialStateType => {\r\n    switch (action.type) {\r\n        case 'ADDDIALOG':\r\n            let newDialog = {name: 'Sergey E', id: 7};\r\n            let newMessage = {message: action.text, id: 7};\r\n            return {...state,\r\n                dialogs: [...state.dialogs,  newDialog],\r\n                message: [...state.message, newMessage]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dialogsReduser;\r\n\r\nexport const addDialogActionCreater = (text: string) => ({type : 'ADDDIALOG', text} as const)\r\n\r\ntype dialogsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype messageType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof addDialogActionCreater>\r\n\r\n","import React from 'react';\r\nimport {userApi} from \"../Api/api\";\r\nimport {getUserItemsType} from \"../Types/types\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<getUserItemsType>,\r\n    pageSize: 3,\r\n    totalCount: 10,\r\n    actionPage: 2,\r\n    isLoaded: false,\r\n    statusButton: false,\r\n    followArrButton: [] as Array<number>,\r\n    followBoolButton: false\r\n}\r\n\r\n\r\n\r\nconst usersReduser = (state = initialState, action: ActionUserType): initialStateUsersType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    } else {\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case 'SETUSER':\r\n            return {\r\n                ...state, users: [...action.users]\r\n            }\r\n        case 'SET_TOTAL_COUNT':\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case 'SET_ACTION_PAGE':\r\n            return {\r\n                ...state, actionPage: action.actionPage\r\n            }\r\n        case 'SET_LOADED':\r\n            return {\r\n                ...state, isLoaded: action.isLoaded\r\n            }\r\n        case 'IS_DISABLED_BUTTON':\r\n\r\n            return {\r\n                ...state,\r\n                followArrButton: action.followBoolButton ?\r\n                    [...state.followArrButton, action.id] :\r\n                    state.followArrButton.filter((i) => i !== action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default usersReduser;\r\n\r\nexport const getUser = (pageSize, actionPage) => {\r\n    return (\r\n        (dispatch) => {\r\n            dispatch(setLoaded(true))\r\n\r\n            userApi.getUsers(pageSize, actionPage)\r\n                .then(response => {\r\n                        dispatch(setLoaded(false))\r\n                        dispatch(setUser(response.items))\r\n                        dispatch(setTotalCount(response.totalCount))\r\n        dispatch(setActionPage(actionPage))\r\n                    }\r\n                )\r\n        }\r\n    )\r\n}\r\n\r\nexport const unFollowBlock = (iserId) => {\r\n    return (dispatch) => {\r\n            dispatch(isdisabledButton(true, iserId))\r\n            userApi.unFollow(iserId)\r\n                .then(response => {\r\n                    if (response.data.resultCode == 0) {\r\n                        dispatch(unfollowUser(iserId))\r\n                    }\r\n                    dispatch(isdisabledButton(false, iserId))\r\n                })\r\n        }\r\n\r\n}\r\n\r\nexport const followBlock = (iserId: number) => {\r\n    return (\r\n        (dispatch) => {\r\n            dispatch(isdisabledButton(true, iserId))\r\n            userApi.follow(iserId)\r\n                .then(response => {\r\n                    if (response.data.resultCode == 0) {\r\n                        dispatch(followUser(iserId))\r\n                    }\r\n                    dispatch(isdisabledButton(false, iserId))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\nexport type FollowType = ReturnType<typeof followUser>\r\nexport type UnFollowType = ReturnType<typeof unfollowUser>\r\nexport type SetUserType = ReturnType<typeof setUser>\r\nexport type SetTotalCountType = ReturnType<typeof setTotalCount>\r\nexport type SetActionPageType = ReturnType<typeof setActionPage>\r\nexport type SetLoadedType = ReturnType<typeof setLoaded>\r\nexport type IsDisabledButtonType = ReturnType<typeof isdisabledButton>\r\n\r\nexport type ActionUserType =\r\n    | FollowType\r\n    | UnFollowType\r\n    | SetUserType\r\n    | SetTotalCountType\r\n    | SetActionPageType\r\n    | SetLoadedType\r\n    | IsDisabledButtonType\r\n\r\nexport const followUser = (userId: number) => ({type: 'FOLLOW', userId} as const);\r\nexport const unfollowUser = (userId: number) => ({type: 'UNFOLLOW', userId} as const);\r\nexport const setUser = (users: Array<getUserItemsType>) => ({type: 'SETUSER', users} as const);\r\nexport const setTotalCount = (count: number) => ({type: 'SET_TOTAL_COUNT', totalCount: count} as const);\r\nexport const setActionPage = (page: number) => ({type: 'SET_ACTION_PAGE', actionPage: page} as const);\r\nexport const setLoaded = (load: boolean) => ({type: 'SET_LOADED', isLoaded: load} as const);\r\nexport const isdisabledButton = (followBoolButton: boolean, id: number) => ({\r\n    type: 'IS_DISABLED_BUTTON',\r\n    followBoolButton,\r\n    id\r\n} as const)\r\n\r\nexport type initialStateUsersType = typeof initialState","import React from 'react';\r\nimport {headerApi} from \"../Api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {formDataType} from \"../Types/types\";\r\nimport {Redirect, Switch} from \"react-router\";\r\nimport {PATH} from \"../App\";\r\nimport ProfileContainer from \"../components/Profile/ProfileContainer\";\r\nimport UsersContainer from \"../components/Users/UsersContainer\";\r\nimport LoginContainer from \"../components/Login/LoginContainer\";\r\nimport DialogsContainer from \"../components/Dialogs/DialogsContainer\";\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    email: null as (string | null),\r\n    login: null as (string | null),\r\n    isLog: false\r\n}\r\n\r\nconst authorReduser = (state = initialState, action: ActionType): initialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"GET_AUTHOR\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default authorReduser;\r\n\r\nexport const getCurentAuthor = (id, login, email, isLog) => ({\r\n    type: 'GET_AUTHOR', payload: {\r\n        id, email, login, isLog\r\n    }\r\n} as const)\r\n\r\nexport const getAuthor = () =>\r\n    (dispatch) => {\r\n        return headerApi.getAuthor()\r\n            .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    let {id, login, email} = response.data\r\n                    dispatch(getCurentAuthor(id, email, login, true)\r\n                    )\r\n                }\r\n            })\r\n    }\r\n\r\n\r\nexport const logInAuthor = (formData: formDataType) => {\r\n    return (\r\n        (dispatch) => {\r\n            headerApi.logInAuthor(formData)\r\n                .then(response => {\r\n                    debugger\r\n                    if (response.data.resultCode === 0) {\r\n                        dispatch(getAuthor()\r\n\r\n                        )\r\n                    } else {\r\n                        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n                        dispatch(stopSubmit('loginForm', {_error: message}))\r\n                    }\r\n                })\r\n        }\r\n    )\r\n}\r\nexport const logOutAuthor = () => {\r\n    return (\r\n        (dispatch) => {\r\n            headerApi.logOutAuthor()\r\n                .then(response => {\r\n                    if (response.data.resultCode === 0) {\r\n                        dispatch(getCurentAuthor(null, null, null, false)\r\n                        )\r\n                    }\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport type initialStateUsersType = typeof initialState\r\ntype getAuthorActionType = ReturnType<typeof getCurentAuthor>\r\ntype ActionType = getAuthorActionType","import {getAuthor, getCurentAuthor} from \"./authorReduser\";\r\n\r\n\r\nlet initialState = {\r\n    initialazed: false,\r\n    captcha: '' as (string | undefined)\r\n}\r\n\r\nconst appReduser = (state = initialState, action: ActionType): initialazedStateType => {\r\n    switch (action.type) {\r\n        case \"INITIAL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialazed: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default appReduser;\r\n\r\nexport const initialSuccess = () => ({type: 'INITIAL_SUCCESS'} as const)\r\n\r\nexport const getInitialAuthor = () => {\r\n    return (\r\n        (dispatch) => {\r\n         dispatch(getAuthor())\r\n              .then(()=>{\r\n                  dispatch(initialSuccess())\r\n              })\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport type initialazedStateType = typeof initialState\r\n\r\ntype initialSuccessAC = ReturnType<typeof initialSuccess>\r\ntype ActionType = initialSuccessAC","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReduser from \"./profile-reducer\";\r\nimport dialogsReduser from \"./dialogsReduser\";\r\nimport usersReduser from \"./usersReduser\";\r\nimport authorReduser from \"./authorReduser\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReduser from \"./appReduser\";\r\n\r\n\r\nlet RootReducer = combineReducers({\r\n    profilePage: profileReduser,\r\n    dialogsPage: dialogsReduser,\r\n    usersPage: usersReduser,\r\n    author: authorReduser,\r\n    form: formReducer,\r\n    app: appReduser\r\n})\r\n\r\nlet store = createStore(RootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppStateType = ReturnType<typeof RootReducer>\r\n\r\nexport default store","import React from \"react\";\r\nimport s from './Nav.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\nexport function Nav() {\r\n    return (\r\n        <nav className={s.nav}>\r\n\r\n\r\n            <div className={s.item}>\r\n                <NavLink to={PATH.SOCIAL_PROFILE} activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to={PATH.SOCIAL_MESSAGE} activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={PATH.SOCIAL_USERS} activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={PATH.SOCIAL_LOGIN} activeClassName={s.activeLink}>Login</NavLink>\r\n            </div>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.73a7815d.svg\";","import React from \"react\";\r\nimport s from './Users.module.css'\r\nimport user from '../../images/user.svg'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {getUserItemsType} from \"../../Types/types\";\r\n\r\ntype UsersPropstype = {\r\n    totalCount: number\r\n    pageSize: number\r\n    clickActionPage: (p: number) => void\r\n    users: Array<getUserItemsType>\r\n    unFollow: (p: number) => void\r\n    follow: (p: number) => void\r\n    actionPage: number\r\n    followArrButton: Array<number>\r\n}\r\n\r\nconst Users: React.FC<UsersPropstype> = (props) => {\r\n\r\n    const {\r\n        totalCount,\r\n        pageSize,\r\n        clickActionPage,\r\n        users,\r\n        unFollow,\r\n        follow,\r\n        actionPage,\r\n        followArrButton\r\n    } = props\r\n\r\n    let pagesCount = Math.ceil(totalCount / (pageSize * 100))\r\n\r\n\r\n    let arr: number[] = []\r\n    for (let i = 1; i < pagesCount; i++) {\r\n        arr.push(i)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.container}>\r\n\r\n\r\n            <div className={s.boxes}>\r\n                {arr.map(p => {\r\n                    return (\r\n                        <div\r\n                            className={`${p === actionPage ? s.activePage : ''} ${s.pageNumberStyle}`}\r\n                            onClick={(e) => {\r\n                                clickActionPage(p)\r\n                            }}\r\n                        >{p}</div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n\r\n            {users.map(i =>\r\n\r\n                <div\r\n                key={i.id} className={s.box}>\r\n                    <div className={s.ava}>\r\n                        <NavLink to={\"/profile/\" + i.id} activeClassName={s.activeLink}>\r\n                            <img src={i.photos.small === null ? user : i.photos.small}/>\r\n                        </NavLink>\r\n                        {\r\n                            i.followed ?\r\n                                <button\r\n                                    disabled={followArrButton.some((u) => u == i.id)}\r\n                                    onClick={() => {\r\n                                        unFollow(i.id)\r\n                                    }}\r\n                                >\r\n                                    UNFollow\r\n                                </button> :\r\n                                <button\r\n                                    disabled={followArrButton.some((u) => u == i.id)}\r\n                                    onClick={() => {\r\n                                        follow(i.id)\r\n                                    }}\r\n                                >\r\n                                    follow\r\n                                </button>\r\n                        }\r\n\r\n                    </div>\r\n                    <div className={s.textArea}>\r\n                        <div className={s.nameMessageArea}>\r\n                            <div>{i.name}</div>\r\n                            <div>{i.status}</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <button className={s.button}>Show more</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/Preloader.9dd581ae.gif\";","import React from 'react';\r\nimport preloader from '../../images/Preloader.gif'\r\n\r\n\r\nfunction Preloader() {\r\n\r\n    return (\r\n        <div style={{backgroundColor: 'white'}}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nfunction getUsersSelector (state: AppStateType) {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers =createSelector(getUsersSelector, (users) => {\r\n    return  users.filter(u => true)\r\n})\r\n\r\nexport function pageSizeSelector (state: AppStateType) {\r\n    return state.usersPage.pageSize\r\n}\r\nexport function totalCountSelector (state: AppStateType) {\r\n    return state.usersPage.totalCount\r\n}\r\nexport function pageActionPage (state: AppStateType) {\r\n    return state.usersPage.actionPage\r\n}\r\nexport function pageIsLoaded (state: AppStateType) {\r\n    return state.usersPage.isLoaded\r\n}\r\nexport function followArrButtonSelector (state: AppStateType) {\r\n    return state.usersPage.followArrButton\r\n}\r\nexport function followBoolButtonSelector (state: AppStateType) {\r\n    return state.usersPage.followBoolButton\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {\r\n    followBlock,\r\n    getUser, isdisabledButton,\r\n    unFollowBlock,\r\n}\r\n    from \"../../Redux/usersReduser\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport Preloader from \"../elseElements/Preloader\";\r\n\r\nimport {\r\n    followArrButtonSelector, followBoolButtonSelector,\r\n    getUsers,\r\n    pageActionPage,\r\n    pageIsLoaded,\r\n    pageSizeSelector,\r\n    totalCountSelector\r\n} from \"../../Redux/usersSelector\";\r\nimport {getUserItemsType} from \"../../Types/types\";\r\n\r\n\r\nclass UsersContainer extends React.Component <MapStateDispatchType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUser(this.props.pageSize, this.props.actionPage)\r\n    };\r\n\r\n    clickActionPage = (p: number) => {\r\n        this.props.getUser(this.props.pageSize, p)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n\r\n                {this.props.isLoaded ? <Preloader/> : null}\r\n                <Users\r\n                    totalCount={this.props.totalCount}\r\n                    pageSize={this.props.pageSize}\r\n                    clickActionPage={this.clickActionPage}\r\n                    users={this.props.users}\r\n                    unFollow={this.props.unFollowBlock}\r\n                    follow={this.props.followBlock}\r\n                    actionPage={this.props.actionPage}\r\n                    followArrButton={this.props.followArrButton}\r\n                />\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: pageSizeSelector(state),\r\n        totalCount: totalCountSelector(state),\r\n        actionPage: pageActionPage(state),\r\n        isLoaded: pageIsLoaded(state),\r\n        followArrButton: followArrButtonSelector(state),\r\n        followBoolButton: followBoolButtonSelector(state)\r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps, {\r\n    followBlock,\r\n    unFollowBlock,\r\n    isdisabledButton,\r\n    getUser\r\n})(UsersContainer);\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<getUserItemsType>\r\n    totalCount: number\r\n    pageSize: number\r\n    actionPage: number\r\n    isLoaded: boolean\r\n    followArrButton: Array<number>\r\n    followBoolButton: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    followBlock: (userId: number) => void\r\n    unFollowBlock: (userId: number) => void\r\n    isdisabledButton: (followBoolButton: boolean, id: number) => void\r\n    getUser: (pageSize: number, actionPage: number) => void\r\n}\r\n\r\n\r\nexport type MapStateDispatchType = MapStateToPropsType & MapDispatchToPropsType","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {MapStateDispatchLogType} from \"./HeaderContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {PATH} from \"../../App\";\r\nimport {Redirect, Switch} from \"react-router\";\r\n\r\nexport function Header(props : MapStateDispatchLogType) {\r\n    return (\r\n        <div className={s.header}>\r\n            <header>\r\n                {props.isLog ?\r\n                    <div>\r\n                        <div>{props.login}</div>\r\n                        <div>{props.email}</div>\r\n                        <div>{props.idAuthor}</div>\r\n                    </div>\r\n                    :\r\n                    <NavLink to={PATH.SOCIAL_LOGIN}>Login</NavLink>\r\n                } {props.isLog &&\r\n                <div>\r\n                    <Button variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"button\"\r\n                            onClick={()=>{\r\n                                props.logOutAuthor()\r\n\r\n                            }}>Log Out\r\n                    </Button>\r\n                    <Switch>\r\n                        <Redirect from={PATH.SOCIAL_404} to={PATH.SOCIAL_PROFILE}/>\r\n                    </Switch>\r\n                </div>\r\n                }\r\n                {!props.isLog &&\r\n                <div>\r\n                    <Switch>\r\n                        <Redirect from={PATH.SOCIAL_PROFILE} to={PATH.SOCIAL_LOGIN}/>\r\n                    </Switch>\r\n                </div>\r\n                }\r\n            </header>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {getAuthor, logOutAuthor} from \"../../Redux/authorReduser\";\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        idAuthor: state.author.id,\r\n        email: state.author.email,\r\n        login: state.author.login,\r\n        isLog: state.author.isLog\r\n    }\r\n}\r\n\r\nclass HeaderContainer extends React.Component <MapStateDispatchLogType> {\r\n    render() {\r\n        return (\r\n            <Header\r\n                idAuthor={this.props.idAuthor}\r\n                email={this.props.email}\r\n                login={this.props.login}\r\n                isLog={this.props.isLog}\r\n                logOutAuthor={this.props.logOutAuthor}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps, {\r\n    getAuthor, logOutAuthor\r\n})(HeaderContainer)\r\n\r\nexport type MapStateDispatchLogType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    idAuthor: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLog: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    logOutAuthor: () => void\r\n}\r\n\r\n","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Message = function (props) {\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const Dialog = function (props) {\r\n    let path = `/message/${props.id}`;\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.dialogsItem}>\r\n            <NavLink to={path} className={s.dialog}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {WrappedFieldMetaProps} from \"redux-form/lib/Field\";\r\nimport {validateType} from \"./validation\";\r\nimport {IUser} from \"../../Types/types\";\r\n\r\ntype FormCreateFieldType = {\r\n    children: React.ReactNode\r\n    label: string\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\ntype ComponentType = (props: WrappedFieldProps & FormCreateFieldType) => void\r\n\r\nexport const FormCreateField = ({\r\n                                    children,\r\n                                    label,\r\n                                    meta: {touched, error}\r\n                                }: FormCreateFieldType) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n                {touched && error && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: ComponentType = (props) => {\r\n    return (\r\n        <FormCreateField {...props}>\r\n            <textarea {...props.input} placeholder={props.label} {...props}/>\r\n        </FormCreateField>\r\n    )\r\n}\r\nexport const TextInput: ComponentType  = (props) => {\r\n    return (\r\n        <FormCreateField {...props}>\r\n            <input {...props.input} placeholder={props.label} {...props}/>\r\n        </FormCreateField>\r\n    )\r\n}\r\nexport const CheckBoxInput: ComponentType  = (props) => {\r\n    return (\r\n        <FormCreateField {...props}>\r\n            <input {...props.input} placeholder={props.label} {...props}/>\r\n        </FormCreateField>\r\n    )\r\n}\r\n\r\nexport function RenderField<Keys extends string>(\r\n    name: Keys,\r\n    component: string | ComponentType,\r\n    label: string,\r\n    validate: string | Array<validateType>,\r\n    type: string) {\r\n    return (\r\n        <Field\r\n            type={type}\r\n            name={name}\r\n            component={component}\r\n            label={label}\r\n            validate={validate}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport type IUserKey =  Extract<keyof IUser, string>","\r\n\r\nexport const required: validateType = (value) => (value || typeof value === 'number' ? undefined : 'Required')\r\n\r\nconst minLength = (min: number): validateType => (value) => value && value.length < min ? `Must be ${min} characters or less` : undefined\r\nconst maxLength = (max: number): validateType => value => value && value.length > max ? `Must be ${max} characters or less` : undefined\r\nexport const maxLength7 = minLength(7)\r\nexport const maxLength20 = maxLength(20)\r\n\r\n\r\n\r\nexport type validateType = (value: string) => string | undefined","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from \"./Message/Message\";\r\nimport {Dialog} from \"./DialodItem/DialogItem\";\r\nimport {DialogStateDispatchType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../helpers/renderField\";\r\nimport {maxLength20, required} from \"../helpers/validation\";\r\n\r\n\r\n\r\nexport const Dialogs: React.FC<DialogStateDispatchType> = (props ) =>{\r\n\r\n    const {dialogsPage, addDialog} = props\r\n\r\n    let state = dialogsPage\r\n\r\n    let getDialog = state.dialogs.map((item)=>{\r\n        return <Dialog name={item.name} />\r\n    });\r\n\r\n    let getMessage = state.message.map((item)=>{\r\n        return  <Message message={item.message} />\r\n    });\r\n\r\n    let addOneDialog = (value: myFormPostsType) => {\r\n        addDialog(value.textarea)\r\n    }\r\n\r\n        return (\r\n\r\n            <div className={s.dialogs}>\r\n\r\n                <div className={s.dialogsItem}>\r\n                    {getDialog}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {getMessage}\r\n                </div>\r\n\r\n               <DialogsRedaxForm onSubmit={addOneDialog}/>\r\n\r\n            </div>\r\n\r\n        )\r\n}\r\n\r\nconst DialogsForm: React.FC<InjectedFormProps<myFormPostsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.dialogsWrapper}>\r\n\r\n                <Field\r\n                    name=\"textarea\"\r\n                    type=\"text\"\r\n                    component={TextArea}\r\n                    label=\"Enter message\"\r\n                    validate={[required, maxLength20]}\r\n                />\r\n\r\n                <button>Add post</button>\r\n            </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nlet DialogsRedaxForm = reduxForm<myFormPostsType, {}>({\r\n    form: 'dialogsForm'\r\n})(DialogsForm)\r\n\r\ntype myFormPostsType = {\r\n    textarea: string\r\n}","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\nconst WithAuthorStateToProps = (state: AppStateType): WithAuthorStateToPropsType => {\r\n    return {\r\n        isLog: state.author.isLog\r\n    }\r\n}\r\n\r\ntype  WithAuthorStateToPropsType = {isLog: boolean}\r\n\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>){\r\n    function HokComponentAuth(props: WithAuthorStateToPropsType) {\r\n\r\n        let {isLog, ...restProps} = props\r\n\r\n        if (isLog) {\r\n            return <Component {...restProps as T}/>\r\n        }\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    let NewProfileContainer = connect(WithAuthorStateToProps)(HokComponentAuth)\r\n\r\n    return NewProfileContainer\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {addDialogActionCreater, initialStateType} from \"../../Redux/dialogsReduser\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../HOK/WithAuthRedirect\";\r\n\r\nlet MapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet MapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        addDialog: (text: string) => {\r\n            dispatch(addDialogActionCreater(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, MapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addDialog: (text: string) => void\r\n}\r\n\r\nexport type DialogStateDispatchType = MapStateToPropsType & MapDispatchToPropsType;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nexport function Post(props: PostType) {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            {props.message}\r\n            {props.likeCount}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    addPost,\r\n    postsType,\r\n} from \"../../../Redux/profile-reducer\";\r\nimport {MyPostsForm} from \"./MyPostsForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {Post} from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\n\r\nlet MapStateToPropsPosts = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePagePosts: state.profilePage.posts\r\n    }\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MapStateDispatchPostsType>  = (props ) => {\r\n\r\n    const {profilePagePosts, addPost} = props\r\n\r\n    const postsElements =\r\n        profilePagePosts.map(p => <Post\r\n            message={p.message}\r\n            likeCount={p.likeCount}\r\n        />)\r\n\r\n    const onAddPost = (value: myFormPostsType)=> {\r\n        addPost(value.textarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n                <MyPostsFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(MapStateToPropsPosts, {addPost})(MyPosts)\r\n\r\nlet MyPostsFormRedux = reduxForm<myFormPostsType, {}>({\r\n    form: 'myPostsForm'\r\n})(MyPostsForm)\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (val: string) => void\r\n}\r\ntype MapStateToPropsType = {\r\n    profilePagePosts: Array<postsType>\r\n}\r\n\r\ntype MapStateDispatchPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport type myFormPostsType = {\r\n    textarea: string\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLength20, required} from \"../../helpers/validation\";\r\nimport {TextArea} from \"../../helpers/renderField\";\r\nimport {myFormPostsType} from \"./MyPostsContainer\";\r\n\r\nexport let MyPostsForm = (props\r\n                               :InjectedFormProps<myFormPostsType>\r\n) => {\r\n   return <form onSubmit={props.handleSubmit}>\r\n       <div>\r\n           <Field\r\n               name=\"textarea\"\r\n               type=\"text\"\r\n               component={TextArea}\r\n               label=\"Enter message\"\r\n               validate={[required, maxLength20]}\r\n           />\r\n\r\n       </div>\r\n        <div>\r\n            <button type=\"submit\"\r\n                // disabled={submitting}\r\n            >\r\n                Submit\r\n            </button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\nexport const ProfileStatusWithHook: React.FC<statusType> = React.memo((props) => {\r\n\r\n    const {statusAuthor, setStatusAuthor} = props\r\n\r\n    const [editMode, seteditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.statusAuthor)\r\n\r\n    useEffect(()=>{\r\n            setStatus(statusAuthor)\r\n\r\n    }, [statusAuthor])\r\n\r\n    function deActivateEditMode() {\r\n        debugger\r\n        seteditMode(false)\r\n        setStatusAuthor(status)\r\n    }\r\n\r\n    const setCurentInput = (e:  ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode && <div>\r\n                    <span onDoubleClick={()=>seteditMode(true)} >{statusAuthor || 'double click here to change the status!!'}</span>\r\n                </div>}\r\n                { editMode && <div>\r\n                    <input autoFocus = {true}\r\n                           onBlur = {deActivateEditMode}\r\n                           value = {status }\r\n                           onChange={setCurentInput}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        )\r\n\r\n})\r\n\r\ntype statusType = {\r\n    statusAuthor: string\r\n    setStatusAuthor: (param: string) => void\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport user from '../../../images/user.svg'\r\nimport {ProfileType} from \"../Profile\";\r\nimport {ProfileStatusWithHook} from \"./ProfileStatusWithHook\";\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileType>  = (props) => {\r\n    const {profileUser, statusAuthor, setStatusAuthor} = props\r\n    return (\r\n            <div className={s.profileInfo}>\r\n                <div>\r\n                    <div><img\r\n                        src={`${profileUser && profileUser.photos?.large ? profileUser.photos.small : user}`}/>\r\n                    </div>\r\n                    <div>{profileUser && profileUser.fullName}</div>\r\n                    <div>{profileUser && profileUser.contacts?.github}</div>\r\n                    <div>{profileUser && profileUser.lookingForAJobDescription}</div>\r\n                </div>\r\n                <div>\r\n                    <ProfileStatusWithHook\r\n                        statusAuthor={statusAuthor}\r\n                        setStatusAuthor={setStatusAuthor}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {getProfileUserType} from \"../../Types/types\";\r\n\r\n\r\nexport const Profile: React.FC<ProfileType> = (props) => {\r\n    const {profileUser, statusAuthor, setStatusAuthor} = props\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profileUser={profileUser}\r\n                statusAuthor={statusAuthor}\r\n                setStatusAuthor={setStatusAuthor}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ProfileType = {\r\n    profileUser: getProfileUserType | null\r\n    statusAuthor: string\r\n    setStatusAuthor: (param: string) => void\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {getProfileUser, getStatusAuthor, setStatusAuthor} from \"../../Redux/profile-reducer\";\r\nimport {withRouter} from \"react-router\";\r\nimport {RouteComponentProps} from \"react-router/ts4.0\";\r\nimport { WithAuthRedirect} from \"../../HOK/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getProfileUserType} from \"../../Types/types\";\r\n\r\n\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profileUser: state.profilePage.profileUser,\r\n        statusAuthor: state.profilePage.statusAuthor,\r\n        authorId: state.author.id\r\n    }\r\n}\r\n\r\nclass ProfileClassContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n        let param : number | null = +this.props.match.params.userId\r\n        if(!param) {\r\n            param = this.props.authorId\r\n            if(!param){\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        } else {\r\n            debugger\r\n            this.props.getProfileUser(param)\r\n            this.props.getStatusAuthor(param)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile\r\n                    profileUser={this.props.profileUser}\r\n                    statusAuthor={this.props.statusAuthor}\r\n                    setStatusAuthor={this.props.setStatusAuthor}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {\r\n        getProfileUser, getStatusAuthor, setStatusAuthor\r\n    }),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n   )(ProfileClassContainer)\r\n\r\n// Type whatever you expect in 'this.props.match.params.*'\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n// Your component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStateDispatchType\r\ntype MapStateToPropsType = {\r\n    profileUser: getProfileUserType | null\r\n    statusAuthor: string\r\n    authorId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getProfileUser: (id: number) => void\r\n    getStatusAuthor: (param: number) => void\r\n    setStatusAuthor: (param: string) => void\r\n}\r\nexport type MapStateDispatchType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Button, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {CheckBoxInput, IUserKey, RenderField, TextInput} from \"../helpers/renderField\";\r\nimport React from \"react\";\r\n\r\nimport { maxLength7, required} from \"../helpers/validation\";\r\nimport {IUser} from \"../../Types/types\";\r\n\r\nexport type captchaType = {\r\n    captcha: string | undefined\r\n}\r\n\r\nfunction LoginForm(props: InjectedFormProps<IUser, captchaType> & captchaType) {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Paper style={{width: \"400px\"}}>\r\n                <Container>\r\n                    <Grid style={{padding: \"10px 0px\"}} container item xs={8} spacing={1}>\r\n                        {RenderField<IUserKey>(\"email\", TextInput, 'enter email: lismgmk2@gmail.com', [required], 'text')}\r\n                    </Grid>\r\n                    <Grid style={{padding: \"10px 0px\"}} container item xs={8} spacing={1}>\r\n                        {RenderField<IUserKey>(\"password\", TextInput, \"enter password: '12345890'\", [required, maxLength7], 'password')}\r\n                    </Grid>\r\n                    <Grid style={{padding: \"10px 0px\"}} container item xs={8} spacing={1}>\r\n                        {RenderField<IUserKey>(\"rememberMe\", CheckBoxInput, \"rememberMe\", [], 'checkBox')}\r\n                    </Grid>\r\n                    {props.error && <div>\r\n                        {props.error}\r\n                    </div>}\r\n\r\n                    <Grid style={{padding: \"10px 0px\"}} container item xs={8} spacing={1}>\r\n                        <div>\r\n                            <Button variant=\"contained\"\r\n                                    color=\"secondary\" type=\"submit\" disabled={props.pristine || props.submitting}>Submit</Button>\r\n                            <Button variant=\"contained\"\r\n                                    color=\"secondary\" type=\"button\" disabled={props.pristine || props.submitting} onClick={props.reset}>Clear\r\n                                Values\r\n                            </Button>\r\n                        </div>\r\n                    </Grid>\r\n                </Container>\r\n            </Paper>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\nimport {logInAuthor} from \"../../Redux/authorReduser\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport LoginForm, {captchaType} from \"../Form/LoginForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router\";\r\nimport {formDataType} from \"../../Types/types\";\r\nimport {PATH} from \"../../App\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        statusAuthor: state.profilePage.statusAuthor,\r\n        isLog: state.author.isLog,\r\n        captcha: state.app.captcha\r\n    }\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<formDataType, captchaType>({\r\n    form: 'loginForm'\r\n})(LoginForm)\r\n\r\nlet LoginConnect: React.FC<PropsTypeLogin> = (props) => {\r\n    const {isLog, captcha, logInAuthor} = props\r\n    const loginAuthors = (data: formDataType) => logInAuthor(data)\r\n    if (isLog) {\r\n        return <Redirect to={PATH.SOCIAL_PROFILE}/>\r\n    }\r\n    return <LoginReduxForm onSubmit={loginAuthors} captcha={captcha}/>\r\n}\r\n\r\nconst LoginContainer = connect(mapStateToProps, {logInAuthor})(LoginConnect)\r\n\r\nexport default LoginContainer\r\n\r\ntype MapStateToPropsType = {\r\n    statusAuthor: string\r\n    isLog: boolean\r\n    captcha: string | undefined\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logInAuthor: (values: formDataType) => void\r\n}\r\nexport type PropsTypeLogin = MapStateToPropsType & MapDispatchToPropsType\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {Nav} from \"./components/Nav/Nav\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {Redirect, Switch, withRouter} from \"react-router\";\r\nimport {AppStateType} from \"./Redux/redux-store\";\r\nimport {getInitialAuthor} from \"./Redux/appReduser\";\r\nimport Preloader from \"./components/elseElements/Preloader\";\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        initialazed: state.app.initialazed\r\n    }\r\n}\r\n\r\nclass App extends React.Component<MapStateDispatchToPropsType> {\r\n    componentDidMount() {\r\n        this.props.getInitialAuthor();\r\n    }\r\n    render() {\r\n        if(!this.props.initialazed){\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n\r\n                <div className={s.appWrapper}>\r\n                    <HeaderContainer/>\r\n                    <Nav/>\r\n                    <div className={s.main}>\r\n                        <Switch>\r\n\r\n                            <Route path={PATH.SOCIAL_NULL} exact render={() => <Redirect to={PATH.SOCIAL_NETWORK}/>}/>\r\n                            <Route exact path={PATH.SOCIAL_NETWORK} render={()=><LoginContainer/> }/>\r\n\r\n\r\n                            <Route exact path={PATH.SOCIAL_PROFILE} render={()=><ProfileContainer/> }/>\r\n                            <Route exact path={PATH.SOCIAL_USERS} render={()=><UsersContainer/> }/>\r\n                            <Route path={PATH.SOCIAL_LOGIN} render={()=><LoginContainer/>} />\r\n                            <Route path={PATH.SOCIAL_MESSAGE} render={()=><DialogsContainer/>} />\r\n                            <Route path={PATH.SOCIAL_404} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                            <Redirect from={'*'} to={PATH.SOCIAL_404}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const PATH = {\r\n    SOCIAL_NETWORK: '/',\r\n    SOCIAL_PROFILE: '/Social-Network/profile',\r\n    SOCIAL_MESSAGE: '/Social-Network/message',\r\n    SOCIAL_USERS: '/Social-Network/users',\r\n    SOCIAL_LOGIN: '/Social-Network/login',\r\n    SOCIAL_404: '/Social-Network/404',\r\n    SOCIAL_NULL: '/',\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps,{getInitialAuthor}),\r\n    withRouter\r\n)(App)\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    getInitialAuthor: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    initialazed: boolean\r\n}\r\ntype MapStateDispatchToPropsType = MapStateToPropsType &  MapDispatchToPropsType","import React from \"react\";\r\nimport store from './Redux/redux-store';\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nlet rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(() => {\r\n    rerenderEntireTree()\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ZNsw\",\"dialogsItem\":\"Dialogs_dialogsItem__1yqes\",\"messages\":\"Dialogs_messages__1Ttja\",\"message\":\"Dialogs_message__3s4ub\",\"active\":\"Dialogs_active__DBF9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__5tq-f\",\"main\":\"App_main__2-cSZ\"};"],"sourceRoot":""}